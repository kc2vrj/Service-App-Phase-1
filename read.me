# Maytech Timesheet & Quote Management System

A comprehensive web application for managing employee timesheets and creating equipment quotes, built with Next.js, Firebase, and Tailwind CSS.

## Features

### Timesheet Management
- Daily and weekly timesheet views
- Automatic time tracking with location support
- Travel time and work hours logging
- Customer and work order tracking
- Notes and detailed entry management

### Quote System
- Professional quote creation
- Line item management with automatic calculations
- Tax rate configuration
- Print-friendly formatting
- Quote status tracking

### User Management
- Role-based access control (USER, OFFICE, ADMIN)
- Secure authentication
- Password management
- User profile management

### Security Features
- Firebase Authentication integration
- Secure data storage
- Input sanitization
- Rate limiting
- Error logging and monitoring

## Technical Stack

- **Frontend**: Next.js, React
- **UI Components**: shadcn/ui, Tailwind CSS
- **Authentication**: Firebase Auth
- **Database**: Firebase Firestore
- **Icons**: Lucide React
- **Form Handling**: Native React forms
- **State Management**: React Context

## Prerequisites

- Node.js (v14 or higher)
- npm or yarn
- Firebase account and project
- Git

## Installation

1. Clone the repository:
```bash
git clone [repository-url]
cd timesheet-app
```

2. Install dependencies:
```bash
npm install
# or
yarn install
```

3. Configure environment variables:
Create a `.env.local` file with the following variables:
```
NEXT_PUBLIC_FIREBASE_API_KEY=
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=
NEXT_PUBLIC_FIREBASE_PROJECT_ID=
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=
NEXT_PUBLIC_FIREBASE_APP_ID=
```

4. Start the development server:
```bash
npm run dev
# or
yarn dev
```

## Project Structure

```
├── components/          # React components
├── contexts/           # Context providers
├── hooks/              # Custom React hooks
├── lib/               # Utility functions and configurations
├── middleware/        # Application middleware
├── pages/             # Next.js pages
├── public/            # Static assets
├── services/          # Business logic services
└── styles/            # Global styles and themes
```

## Key Components

- `TimesheetApp`: Main timesheet management component
- `QuoteForm`: Quote creation and management
- `AdminUserManagement`: User administration interface
- `Navigation`: Main navigation component
- `ErrorBoundary`: Global error handling

## Security Features

- Input sanitization for all user inputs
- Rate limiting for authentication attempts
- Secure Firebase rules implementation
- Error logging and monitoring
- Role-based access control

## Available Scripts

- `npm run dev`: Start development server
- `npm run build`: Build production application
- `npm start`: Start production server
- `npm run lint`: Run ESLint

## Deployment

The application can be deployed to various platforms. Here are the steps for Vercel deployment:

1. Push your code to a Git repository
2. Connect your repository to Vercel
3. Configure environment variables in Vercel
4. Deploy

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Support

For support, please contact [support email/contact information].

## Acknowledgments

- shadcn/ui for the component library
- Lucide React for icons
- Firebase for backend services
- Tailwind CSS for styling